

import 'package:flutter/material.dart';
import 'dart:math';



extension RippleAnimationExtension on Widget {
  Widget rippleAnimation() {
    return AnimatedRipple(
      child: this,
    );
  }
}

class AnimatedRipple extends StatefulWidget {
  final Widget child;

  const AnimatedRipple({Key? key, required this.child}) : super(key: key);

  @override
  _AnimatedRippleState createState() => _AnimatedRippleState();
}

class _AnimatedRippleState extends State<AnimatedRipple> with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    );

    _animation = Tween<double>(begin: 0, end: 1).animate(_animationController)
      ..addListener(() {
        setState(() {});
      })
      ..addStatusListener((status) {
        if (status == AnimationStatus.dismissed) {
          _animationController.forward();
        } else if (status == AnimationStatus.completed) {
          _animationController.repeat();
        }
      });

    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      painter: _RipplePainter(_animation.value),
      child: widget.child,
    );
  }
}

class _RipplePainter extends CustomPainter {
  final double animationValue;

  _RipplePainter(this.animationValue);

  @override
  void paint(Canvas canvas, Size size) {
    for (int value = 3; value >= 0; value--) {
      _drawCircle(canvas, Rect.fromLTRB(0, 0, size.width, size.height), value + animationValue);
    }
  }

  void _drawCircle(Canvas canvas, Rect rect, double value) {
    final paint = Paint()..color = Colors.blue.withOpacity((1 - (value / 4)).clamp(0.0, 1.0));
    canvas.drawCircle(rect.center, sqrt((rect.width * .5 * rect.width * .5) * value / 4), paint);
  }

  @override
  bool shouldRepaint(_RipplePainter oldDelegate) {
    return true;
  }
}
