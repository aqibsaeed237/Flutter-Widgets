import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:snabb_business/utils/imports.dart';

extension AnimationExtension on Widget {
  Widget withRainAnimation() {
    return RainAnimation(child: this); // Wrap the current widget with RainAnimation
  }
}

class RainAnimation extends StatefulWidget {
  final Widget child;

  const RainAnimation({Key? key, required this.child}) : super(key: key);

  @override
  _RainAnimationState createState() => _RainAnimationState();
}

class _RainAnimationState extends State<RainAnimation>
    with TickerProviderStateMixin {
  late final Ticker _ticker;
  late final Random _random;

  @override
  void initState() {
    super.initState();
    _random = Random();
    _ticker = createTicker(_updateRainDrop);
    _ticker.start();
  }

  @override
  void dispose() {
    _ticker.dispose();
    super.dispose();
  }

  void _updateRainDrop(Duration elapsed) {
    setState(() {}); // Redraw the widget
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;
    return Stack(
      children: [
        for (int index = 0; index < 300; index++)
          _RainDrop(
            screenHeight: screenSize.height,
            screenWidth: screenSize.width,
            random: _random,
          ),
        widget.child,
      ],
    );
  }
}

class _RainDrop extends StatelessWidget {
  final double screenHeight, screenWidth;
  final Random random;

  const _RainDrop({
    Key? key,
    required this.screenHeight,
    required this.screenWidth,
    required this.random,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final dx = random.nextDouble() * screenWidth;
    final dy = -500 - (random.nextDouble() * -500);
    final z = random.nextDouble() * 20;
    final length = _rangeMap(z, 0, 20, 10, 20);
    final vy = _rangeMap(z, 0, 20, 15, 5);

    return AnimatedPositioned(
      duration: Duration(milliseconds: 1000),
      curve: Curves.linear,
      left: dx,
      top: dy,
      child: Container(
        height: length,
        width: 2,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(5),
          color: Colors.white,
          border: Border.all(width: _rangeMap(z, 0, 20, 1, 3)),
        ),
      ),
    );
  }

  double _rangeMap(
    double x,
    double inMin,
    double inMax,
    double outMin,
    double outMax,
  ) {
    return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
  }
}
